""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Appearance {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set and configure the color scheme
colorscheme OceanicNext
set background=dark
set number              " Show line numbers
set relativenumber      " Relative line numbering
set showcmd             " Display partially typed command
set lazyredraw          " Do not redraw on macro/regs/untyped commands
set showmatch           " Highlight matching [{()}]
set hlsearch            " Highlight search matches
set scrolloff=0         " scroll offset

" Disable all error bells
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Make active buffer more obvious
augroup BufFocus
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * set cursorline
  autocmd WinLeave * set nocursorline
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
"Behavior {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable           " enable syntax highlighting
filetype plugin indent on " Load filetype-specific configuration
set modeline            " Read vim modeline configs

set nrformats="bin,hex" " define bases for <C-a> and <C-x> math operations
set history=1000        " Remember more stuff
set tabpagemax=50       " Max tab pages

" Backspace works on autoindent, line break and start of insert
set backspace=indent,eol,start
set autoindent
set wrap

set encoding=utf8       " UTF-8 as default encoding
set ffs=unix,dos,mac    " Standard file type as Unix
set autoread            " automatically read when file is changed from outside
set wildmenu            " Completion dropdown-thing
set completeopt=longest,menuone,popup,noselect
set hidden              " Hide unsaved buffers instead of closing
"set confirm             " Prompt if exiting without saving
set mouse=a             " Use mouse for all modes

set incsearch           " Search as characters are entered
set ignorecase          " Ignore case
set smartcase           " Except if there is a capital letter

set splitbelow          " New split goes below
set splitright          " and to right
set foldenable          " Enable code folding
set foldnestmax=10      " Max 10 nested folds
set foldlevel=0         " Close all folds by default
set formatoptions+=j    " Delete comment character when joining commented lines

" Break line joins into multiple edits
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

" :h :mkview
set sessionoptions-=options
set viewoptions-=options

" Fold vimrc on opening
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim setlocal foldlevelstart=0
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
"Status line {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" unicode(private) separators: 
set laststatus=2                " Always show statusline

let currentmode = {
      \ 'n'  : '  NORMAL ',
      \ 'i'  : '  INSERT ',
      \ 'v'  : '  VISUAL ',
      \ 'V'  : '  V·LINE ',
      \ '' : '  V·BLOCK ',
      \ 'Rv' : '  V·RPLACE ',
      \ 'R'  : '  RPLACE ',
      \ 'no' : '  NORM·OP ',
      \ 's'  : '  SELECT ',
      \ 'S'  : '  S·LINE ',
      \ '^S' : '  S·BLOCK ',
      \ 'c'  : '  COMMAND ',
      \ 'r'  : '  PROMPT ',
      \ 'rm' : '  MORE ',
      \ 'r?' : '  CONFIRM ',
      \ 'cv' : '  VIM EX ',
      \ 'ce' : '  EX ',
      \ '!'  : '  SHELL ',
      \ 't'  : '  TERMINAL ',
      \}

" |hitest.vim|

set statusline=
set statusline+=%#DiffAdd#%{currentmode[mode()]}

set statusline+=%#Cursor#
set statusline+=\ %n\           " buffer number
set statusline+=%{&paste?'\ PASTE\ ':''}
set statusline+=%{&spell?'\ SPELL\ ':''}
set statusline+=%R              " readonly flag
set statusline+=%M              " modified [+] flag
set statusline+=%#CursorLine#       " color
set statusline+=\ %f\           " file name
set statusline+=%=              " right align

" file encoding, format
set statusline+=%{&fileencoding?&fileencoding:&encoding}\ 
set statusline+=%{&fileformat}\ 

set statusline+=%Y\            " file type
set statusline+=%#DiffAdd#        " color
set statusline+=\ %{FugitiveHead()}
set statusline+=%#CursorLine#        " color
set statusline+=\ %3l:%-2c      " line + column
set statusline+=               " separator
set statusline+=%#Cursor#        " color
set statusline+=%3p%%\          " percentage

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
"netrw {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_banner = 0          " Top banner
let g:netrw_liststyle = 3       " Directory list view
let g:netrw_browse_split = 4    " File open behaviour
let g:netrw_altv = 1
let g:netrw_winsize = 17        " Size of opened buffer
" Open by default on launch
"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
"Key maps {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :W to save file with elevated permissions
command W w !sudo tee % > /dev/null

" Map redraw-screen to also clear search highlights
nnoremap <silent> <C-L> :nohl<CR>:mat<CR><C-L>

let mapleader = " "             " Set leader key
let maplocalleader = ";"        " Set local leader key

" Quickly edit and reload vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
vnoremap <leader>" <esc>`<i"<esc>`>la"<Esc>

" Highlight trailing whitespace
nnoremap <leader>w :match Error /\v\s+$/<CR>

" Start all searches in magic mode
nnoremap / /\v

" Grep for word under cursor in cwd and open matched files in quickfix window
"nnoremap <leader>g :silent execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<CR>:copen<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" }}}
"Plugins {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" % jump to matching xml tags, if/else/endif, etc.
packadd! matchit

" Open files in current dir using fzf
nnoremap <silent> <leader>f :FZF<CR>

" Select from open buffers using fzf
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Leader>b :call fzf#run({
      \   'source':  reverse(<sid>buflist()),
      \   'sink':    function('<sid>bufopen'),
      \   'options': '+m',
      \   'down':    len(<sid>buflist()) + 2
      \ })<CR>

" vim: ts:et:sw=2:
